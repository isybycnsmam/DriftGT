"""
This script generates TARGET_FILE that has mapped files from SOURCE_FOLDER, which extensions are mapped in FILES_TYPE_TO_CONTENT_TYPE
"""
import os

SOURCE_FOLDER = './page'
TARGET_FILE = 'include/static_website_content.h'
DECLARATION_NAME = 'STATIC_WEBSITE_CONTENT_H'
FILES_TYPE_TO_CONTENT_TYPE = {
    '.html': 'text/html',
    '.js': 'text/javascript',
    '.css': 'text/css',
}

def generate_variable_declaration(variable_name: str, content: str):
    return f'const char {variable_name}[] PROGMEM = R"""(\n' + content + ')""";\n\n'

def generate_endpoint_declaration(endpoint: str, content_type: str, content_variable: str):
    return f'\tserver->on("/{endpoint}", HTTP_GET, [](AsyncWebServerRequest *request)\n\t\t\t  {{ request->send(200, "{content_type}", {content_variable}); }});\n\n'

variables_declarations_section = ""
endpoints_declarations_section = ""

for file_name in os.listdir(SOURCE_FOLDER):
    variable_name, file_extension = os.path.splitext(file_name)
    file_path = os.path.join(SOURCE_FOLDER, file_name)

    if file_extension not in FILES_TYPE_TO_CONTENT_TYPE.keys():
        print(f'Skipped mapping file {file_name} ({file_extension}), it\'s extension is not on whitelist')
        continue

    variable_name = f'{variable_name}_content'.upper()
    print(f'Mapping file {file_name} to variable {variable_name}')

    file = open(file_path, "r")
    file_content = file.read()

    variables_declarations_section += generate_variable_declaration(variable_name, file_content)
    endpoints_declarations_section += generate_endpoint_declaration(file_name, FILES_TYPE_TO_CONTENT_TYPE[file_extension], variable_name)


file = open(TARGET_FILE, "w")
file.write(f'''\
// AUTO-GENERATED ON BUILD
// DO NOT CHANGE
// generated by pre build script '../extra_script.py'
#include <avr/pgmspace.h>   
#include "ESPAsyncWebServer.h"

#ifndef {DECLARATION_NAME}
#define {DECLARATION_NAME}

{variables_declarations_section}

void init_static_content_endpoints(AsyncWebServer *server) {{
{endpoints_declarations_section}
}}
#endif // {DECLARATION_NAME}
''')
file.close()